// C++ program to implement
// the above approach
#include<iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int data)
    {
        this->data = data;
        next = NULL;
    }
};

// initialize a new head
// for the linked list
Node* head = NULL;
class Linkedlist {
public:
    // insert new value at the start
    void insert(int value)
    {
        Node* newNode = new Node(value);
        if (head == NULL)
            head = newNode;
        else {
            newNode->next = head;
            head = newNode;
        }
    }

    Node* detectloop()    // detect if there is a loop
    {                       // in the linked list
        if (head == NULL)
        {
            return NULL;
        }
        Node* slow = head;
        Node* fast = head;
        while (fast!=NULL && fast->next!=NULL)
        {
            slow = slow->next;
            fast = fast->next;
            if (fast->next!=NULL)
            {
                fast = fast->next;
            }
            if (slow==fast)
            {
                return slow;
            }
        }
        return NULL;
    }
    Node* detectLoopindex()
    {
        //If link list is empty, there are no loop.
        //If only one element is found in link list, there are no loop.
        if (head == NULL || head->next == NULL) {
            return NULL;
        }
        Node* index = detectloop();
        if (index==NULL)
        {
            return NULL;
        }
        Node* start = head;
        while (start!=index)
        {
            index = index->next;
            start = start->next;
        }
        return start;
    }
    void removeloop()
    {
        Node* start = detectLoopindex();
        if (start == NULL)
        {
            return;
        }
        Node* preindex = start;
        while (start != preindex->next)
        {
            preindex= preindex->next;
        }
        preindex->next = NULL;
    }
};

int main()
{
    Linkedlist l1;
    // inserting new values
    l1.insert(10);
    l1.insert(20);
    l1.insert(30);
    l1.insert(40);
    l1.insert(50);

    // adding a loop for the sake
    // of this example
    Node* temp = head;
    while (temp->next != NULL)
        temp = temp->next;
    // loop added;
    temp->next = head;
    l1.removeloop(); // in here we can remove the loop
    Node* loopStart = l1.detectLoopindex();
    if (loopStart == NULL)
        cout << "Loop does not exists" << endl;
    else {
        cout << "Loop does exists and starts from "
            << loopStart->data << endl;
    }

    return 0;
}
